using Content.Client.Message;
using Content.Shared.DNA;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.AutoGenerated;
using Content.Client.DNA;

namespace Content.Client.DNA.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class DNAConsoleWindow : DefaultWindow
    {
        public DNAConsoleWindow()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
        }

        private DNAConsoleBoundUserInterfaceState? _lastUpdate;

        public void Populate(DNAConsoleBoundUserInterfaceState state)
        {
            _lastUpdate = state;
            // BUILD SCANNER UI
            if (state.ScannerConnected)
            {
                if (!state.ScannerInRange)
                {
                   
                }

              
              
              
              


                CloningPodContents.Visible = true;
                CloningPodFar.Visible = false;
                CloningPodMissing.Visible = false;

                ClonerBrainActivity.SetMarkup(Loc.GetString(state.MindPresent ? "cloning-console-mind-present-text" : "cloning-console-no-mind-activity-text"));
                // Set label depending if clonepod is occupied or not
                ClonerInfoLabel.SetMarkup(state.ClonerBodyInfo != null ?
                    Loc.GetString("cloning-console-window-pod-id", ("podOccupantName", state.ClonerBodyInfo)) :
                    Loc.GetString("cloning-console-window-id-blank"));
            }
            else
            {
                // Clone pod is missing, set error message visible
                CloningPodContents.Visible = false;
                CloningPodFar.Visible = false;
                CloningPodMissing.Visible = true;
            }
        }
    }
}
